// Danh s√°ch ph·∫ßn th∆∞·ªüng v·ªõi x√°c su·∫•t
const rewards = [
  { amount: 5000, probability: 0.3 },   // 30%
  { amount: 10000, probability: 0.2 }, // 20%
  { amount: 20000, probability: 0.37 },// 20%
  { amount: "Ch√∫c b·∫°n nƒÉm m·ªõi b√¨nh an", probability: 0.01 }, // 1%
  { amount: 50000, probability: 0.05 }, // 5%
  { amount: 100000, probability: 0.04 },// 4%
  { amount: 200000, probability: 0.03 } // 3%
];

// L·∫•y ph·∫ßn t·ª≠ DOM
const slider = document.getElementById("lixi-slider");
const result = document.getElementById("result");
const resetBtn = document.getElementById("reset-btn");
const items = document.querySelectorAll(".lixi-item");
const rewardImage = document.getElementById("reward-image");
const suspenseImage = document.getElementById("suspense-image");
const userCodeInput = document.getElementById("user-code");
const startBtn = document.getElementById("start-btn");

// B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªông
slider.classList.add("start-rotate");

// H√†m t√≠nh ph·∫ßn th∆∞·ªüng d·ª±a tr√™n x√°c su·∫•t
function getRandomReward() {
  let totalProbability = 0;
  rewards.forEach((item) => {
    totalProbability += item.probability;
  });

  let random = Math.random();
  let cumulativeProbability = 0;

  for (let i = 0; i < rewards.length; i++) {
    cumulativeProbability += rewards[i].probability;
    if (random <= cumulativeProbability) {
      return rewards[i].amount;
    }
  }
}

// H√†m l∆∞u k·∫øt qu·∫£ v√†o local storage
function saveResult(code, reward) {
  let history = JSON.parse(localStorage.getItem("drawHistory")) || {};
  history[code] = reward;
  localStorage.setItem("drawHistory", JSON.stringify(history));
}

// X·ª≠ l√Ω khi b·∫•m v√†o n√∫t b·∫Øt ƒë·∫ßu
startBtn.addEventListener("click", () => {
  const userCode = userCodeInput.value.trim();
  if (!userCode) {
    alert("Vui l√≤ng nh·∫≠p m√£ c·ªßa b·∫°n!");
    return;
  }

  // Ki·ªÉm tra m√£ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ch∆∞a
  const history = JSON.parse(localStorage.getItem("drawHistory")) || {};
  if (history[userCode]) {
    alert(`M√£ n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† nh·∫≠n ƒë∆∞·ª£c ${history[userCode]} VND!`);
    return;
  }

  // Hi·ªÉn th·ªã c√°c bao l√¨ x√¨ ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
  slider.style.display = "block";
  startBtn.style.display = "none";
  userCodeInput.style.display = "none";
});

// X·ª≠ l√Ω khi b·∫•m v√†o t·ª´ng bao l√¨ x√¨
items.forEach((item) => {
  item.addEventListener("click", () => {
    // T·∫Øt click ƒë·ªÉ tr√°nh spam
    items.forEach((el) => el.style.pointerEvents = "none");

    // D·ª´ng hi·ªáu ·ª©ng xoay
    // slider.classList.remove("start-rotate");
    // slider.classList.add("stop-rotate");

    // X√≥a k·∫øt qu·∫£ l·∫ßn quay tr∆∞·ªõc
    result.innerHTML = "";
    rewardImage.style.backgroundImage = "";

    // Hi·ªÉn th·ªã h√¨nh ·∫£nh h·ªìi h·ªôp
    suspenseImage.style.display = "block";
    suspenseImage.classList.add("show");

    // X·ª≠ l√Ω ph·∫ßn th∆∞·ªüng sau m·ªôt kho·∫£ng th·ªùi gian
    setTimeout(() => {
      // ·∫®n h√¨nh ·∫£nh h·ªìi h·ªôp
      suspenseImage.classList.remove("show");
      suspenseImage.style.display = "none";

      // X·ª≠ l√Ω ph·∫ßn th∆∞·ªüng
      const reward = getRandomReward();
      result.innerHTML = `B·∫°n nh·∫≠n ƒë∆∞·ª£c <strong>${reward.toLocaleString()} VND</strong>! üéâ`;

      // Hi·ªÉn th·ªã h√¨nh ·∫£nh m·ªánh gi√° t∆∞∆°ng ·ª©ng
      rewardImage.style.backgroundImage = `url('lixi/img/${reward}.png')`;

      // L∆∞u k·∫øt qu·∫£ v√†o local storage
      const userCode = userCodeInput.value.trim();
      saveResult(userCode, reward);

      // Di chuy·ªÉn slider ra kh·ªèi m√†n h√¨nh
      slider.style.transform = "translateX(-100vw)";
      slider.style.transition = "transform 1s ease-in-out";

      // L√†m n·ªïi b·∫≠t bao l√¨ x√¨ ƒë∆∞·ª£c ch·ªçn v√† ƒë∆∞a v·ªÅ ch√≠nh gi·ªØa
      const itemPosition = item.style.getPropertyValue('--position');
      const rotateAngle = (itemPosition - 1) * (360 / items.length);
      item.style.transform = `rotateY(${-rotateAngle}deg) translateZ(200px) rotateX(360deg)`;
      item.style.transition = "transform 1s ease-in-out";
      item.classList.add("selected");

      // Hi·ªán n√∫t r√∫t l·∫°i
      resetBtn.style.display = "inline-block";
    }, 2000); // Th·ªùi gian ch·ªù 2 gi√¢y ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng h·ªìi h·ªôp
  });
});

// X·ª≠ l√Ω n√∫t r√∫t l·∫°i
resetBtn.addEventListener("click", () => {
  // Reset tr·∫°ng th√°i
  resetBtn.style.display = "none";
  slider.style.display = "none";
  startBtn.style.display = "inline-block";
  userCodeInput.style.display = "inline-block";
  userCodeInput.value = "";

  items.forEach((item) => {
    item.style.transform = "rotateY(calc( (var(--position) - 1) * (360 / var(--quantity)) * 1deg)) translateZ(200px)"; // ƒê∆∞a v·ªÅ k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ ban ƒë·∫ßu
    item.style.pointerEvents = "auto";
    item.classList.remove("selected");
  });

  // Reset hi·ªáu ·ª©ng xoay
  slider.classList.remove("stop-rotate");

  // B·∫Øt ƒë·∫ßu l·∫°i hi·ªáu ·ª©ng xoay
  slider.classList.add("start-rotate");
});

// Function to create a flower element
function createFlower() {
  const flower = document.createElement('div');
  flower.classList.add('flower');
  flower.style.left = `${Math.random() * 100}vw`;
  flower.style.animationDuration = `${Math.random() * 3 + 2}s`; // Random duration between 2s and 5s
  flower.style.opacity = Math.random();
  document.getElementById('flower-container').appendChild(flower);

  // Remove the flower after animation ends
  flower.addEventListener('animationend', () => {
    flower.remove();
  });
}

// Create flowers at intervals
setInterval(createFlower, 300);